// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MocktransportClient is a mock of transportClient interface.
type MocktransportClient struct {
	ctrl     *gomock.Controller
	recorder *MocktransportClientMockRecorder
}

// MocktransportClientMockRecorder is the mock recorder for MocktransportClient.
type MocktransportClientMockRecorder struct {
	mock *MocktransportClient
}

// NewMocktransportClient creates a new mock instance.
func NewMocktransportClient(ctrl *gomock.Controller) *MocktransportClient {
	mock := &MocktransportClient{ctrl: ctrl}
	mock.recorder = &MocktransportClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransportClient) EXPECT() *MocktransportClientMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MocktransportClient) Notify(ctx context.Context, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MocktransportClientMockRecorder) Notify(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MocktransportClient)(nil).Notify), ctx, msg)
}
