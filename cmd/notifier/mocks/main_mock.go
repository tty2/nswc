// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/notifier/main.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mocknotifier is a mock of notifier interface.
type Mocknotifier struct {
	ctrl     *gomock.Controller
	recorder *MocknotifierMockRecorder
}

// MocknotifierMockRecorder is the mock recorder for Mocknotifier.
type MocknotifierMockRecorder struct {
	mock *Mocknotifier
}

// NewMocknotifier creates a new mock instance.
func NewMocknotifier(ctrl *gomock.Controller) *Mocknotifier {
	mock := &Mocknotifier{ctrl: ctrl}
	mock.recorder = &MocknotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocknotifier) EXPECT() *MocknotifierMockRecorder {
	return m.recorder
}

// ReadErrors mocks base method.
func (m *Mocknotifier) ReadErrors() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadErrors")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// ReadErrors indicates an expected call of ReadErrors.
func (mr *MocknotifierMockRecorder) ReadErrors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadErrors", reflect.TypeOf((*Mocknotifier)(nil).ReadErrors))
}

// Send mocks base method.
func (m *Mocknotifier) Send(ctx context.Context, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", ctx, msg)
}

// Send indicates an expected call of Send.
func (mr *MocknotifierMockRecorder) Send(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*Mocknotifier)(nil).Send), ctx, msg)
}
